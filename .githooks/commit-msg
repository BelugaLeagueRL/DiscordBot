#!/bin/bash
# Git commit-msg hook to enforce conventional commit format
# This hook is triggered every time a commit is made

commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}üîç Validating commit message...${NC}"

# Check conventional commit format
regex="^(feat|fix|docs|style|refactor|perf|test|build|ci|chore|revert)(\([^)]+\))?: .+"
if [[ ! "$commit_msg" =~ $regex ]]; then
    echo -e "${RED}‚ùå Invalid commit message format!${NC}"
    echo ""
    echo -e "${YELLOW}Current message:${NC}"
    echo "  $commit_msg"
    echo ""
    echo -e "${YELLOW}Required format:${NC}"
    echo "  type(scope): description"
    echo ""
    echo -e "${YELLOW}Valid types:${NC}"
    echo "  feat     - A new feature"
    echo "  fix      - A bug fix"
    echo "  docs     - Documentation only changes"
    echo "  style    - Changes that do not affect the meaning of the code"
    echo "  refactor - A code change that neither fixes a bug nor adds a feature"
    echo "  perf     - A code change that improves performance"
    echo "  test     - Adding missing tests or correcting existing tests"
    echo "  build    - Changes that affect the build system or external dependencies"
    echo "  ci       - Changes to CI configuration files and scripts"
    echo "  chore    - Other changes that don't modify src or test files"
    echo "  revert   - Reverts a previous commit"
    echo ""
    echo -e "${YELLOW}Examples:${NC}"
    echo "  feat: add user authentication"
    echo "  fix(auth): resolve login validation issue"
    echo "  docs: update API documentation"
    echo "  test(utils): add unit tests for helper functions"
    exit 1
fi

# Check for forbidden references (AI tools, etc.)
if [[ "$commit_msg" =~ [Cc]laude|[Aa][Ii]|assistant|automated|[Cc]hatGPT|[Gg]PT ]]; then
    echo -e "${RED}‚ùå Commit message contains forbidden references!${NC}"
    echo ""
    echo -e "${YELLOW}Current message:${NC}"
    echo "  $commit_msg"
    echo ""
    echo -e "${YELLOW}Forbidden terms:${NC}"
    echo "  - Claude, AI, assistant, automated, ChatGPT, GPT"
    echo "  - Focus on the technical change and business value"
    echo "  - Do not reference the development process or tools used"
    exit 1
fi

# Check minimum description length
description=$(echo "$commit_msg" | sed 's/^[^:]*: *//')
if [[ ${#description} -lt 10 ]]; then
    echo -e "${RED}‚ùå Commit description too short!${NC}"
    echo ""
    echo -e "${YELLOW}Current message:${NC}"
    echo "  $commit_msg"
    echo ""
    echo -e "${YELLOW}Description should be at least 10 characters and descriptive.${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Commit message is valid!${NC}"
exit 0