/**
 * STRICT ESLint Configuration - Currently Paused
 * 
 * This is the original strict ESLint configuration based on "Effective TypeScript"
 * and TypeScript 5 Design Patterns. It enforces zero-tolerance quality standards.
 * 
 * This configuration is temporarily paused to allow Issue #17 completion.
 * It should be restored after addressing the 186 linting violations systematically.
 */

import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import prettierConfig from 'eslint-config-prettier';

export default tseslint.config(
  eslint.configs.recommended,
  {
    files: ['src/**/*.{ts,js}'],
    extends: [...tseslint.configs.recommendedTypeChecked, ...tseslint.configs.strictTypeChecked],
    languageOptions: {
      parserOptions: {
        project: './tsconfig.json',
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      // EFFECTIVE TYPESCRIPT: "Think of Types as Sets of Values"
      '@typescript-eslint/no-explicit-any': 'error', // Item 5: Limit use of any
      '@typescript-eslint/prefer-unknown-over-any': 'error', // Use unknown instead of any
      '@typescript-eslint/ban-types': ['error', {
        types: {
          'Function': 'Use specific function signature instead',
          'Object': 'Use specific object type instead',
          '{}': 'Use Record<string, unknown> or specific interface instead'
        }
      }],
      
      // EFFECTIVE TYPESCRIPT: Type Safety & Inference
      '@typescript-eslint/no-unnecessary-type-assertion': 'error', // Item 9: Prefer type annotations to assertions
      '@typescript-eslint/prefer-as-const': 'error', // Item 21: Understand type widening
      '@typescript-eslint/prefer-readonly': 'error', // Use readonly to prevent mutation
      '@typescript-eslint/prefer-readonly-parameter-types': 'error',
      '@typescript-eslint/explicit-function-return-type': 'error',
      '@typescript-eslint/explicit-module-boundary-types': 'error',
      
      // EFFECTIVE TYPESCRIPT: Advanced Type Patterns
      '@typescript-eslint/prefer-reduce-type-parameter': 'error', // Better generic usage
      '@typescript-eslint/prefer-return-this-type': 'error', // Method chaining patterns
      '@typescript-eslint/prefer-string-starts-ends-with': 'error',
      '@typescript-eslint/switch-exhaustiveness-check': 'error', // Exhaustiveness with never
      
      // DESIGN PATTERNS: SOLID Principles Enforcement
      'max-params': ['error', 4], // Interface Segregation Principle
      'complexity': ['error', 10], // Single Responsibility Principle
      '@typescript-eslint/prefer-composition-over-inheritance': 'warn',
      
      // DESIGN PATTERNS: Factory & Builder Patterns
      '@typescript-eslint/no-misused-new': 'error',
      '@typescript-eslint/unified-signatures': 'error', // Prefer function overloads
      
      // DESIGN PATTERNS: Strategy & Command Patterns
      '@typescript-eslint/prefer-function-type': 'error',
      '@typescript-eslint/method-signature-style': ['error', 'property'],
      
      // FUNCTIONAL PROGRAMMING (Design Patterns Book)
      '@typescript-eslint/prefer-includes': 'error',
      '@typescript-eslint/prefer-optional-chain': 'error',
      '@typescript-eslint/prefer-nullish-coalescing': 'error',
      'prefer-arrow-callback': 'error',
      'no-var': 'error',
      'prefer-const': 'error',
      
      // TYPE NARROWING & FLOW (Effective TypeScript)
      '@typescript-eslint/strict-boolean-expressions': ['error', {
        allowString: false,
        allowNumber: false,
        allowNullableObject: false
      }],
      '@typescript-eslint/no-unnecessary-condition': 'error',
      
      // DOMAIN-SPECIFIC MODELING (Both Books)
      '@typescript-eslint/naming-convention': ['error',
        {
          selector: 'typeLike',
          format: ['PascalCase']
        },
        {
          selector: 'interface',
          format: ['PascalCase'],
          custom: {
            regex: '^I[A-Z]',
            match: false
          }
        },
        {
          selector: 'typeParameter',
          format: ['PascalCase'],
          prefix: ['T', 'K', 'V']
        }
      ],
      
      // IMPORTS & ORGANIZATION (Both Books)
      '@typescript-eslint/consistent-type-imports': ['error', {
        prefer: 'type-imports',
        fixStyle: 'separate-type-imports',
        disallowTypeAnnotations: false
      }],
      '@typescript-eslint/consistent-type-exports': 'error',
      
      // ERROR HANDLING PATTERNS (Design Patterns)
      '@typescript-eslint/no-throw-literal': 'error',
      '@typescript-eslint/prefer-promise-reject-errors': 'error',
      '@typescript-eslint/no-floating-promises': 'error',
      '@typescript-eslint/require-await': 'error',
      
      // SECURITY & BEST PRACTICES
      'no-eval': 'error',
      'no-implied-eval': 'error',
      '@typescript-eslint/no-implied-eval': 'error',
      'no-new-func': 'error',
      'no-console': 'off',
    },
  },
  prettierConfig,
);